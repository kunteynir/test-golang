// Code generated by MockGen. DO NOT EDIT.
// Source: lock.go

// Package mocklock_mock is a generated GoMock package.
package mocklock_mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDo is a mock of Do interface
type MockDo struct {
	ctrl     *gomock.Controller
	recorder *MockDoMockRecorder
}

// MockDoMockRecorder is the mock recorder for MockDo
type MockDoMockRecorder struct {
	mock *MockDo
}

// NewMockDo creates a new mock instance
func NewMockDo(ctrl *gomock.Controller) *MockDo {
	mock := &MockDo{ctrl: ctrl}
	mock.recorder = &MockDoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDo) EXPECT() *MockDoMockRecorder {
	return m.recorder
}

// Do2 mocks base method
func (m *MockDo) Do2(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do2", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Do2 indicates an expected call of Do2
func (mr *MockDoMockRecorder) Do2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do2", reflect.TypeOf((*MockDo)(nil).Do2), arg0)
}

// Do3 mocks base method
func (m *MockDo) Do3(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do3", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Do3 indicates an expected call of Do3
func (mr *MockDoMockRecorder) Do3(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do3", reflect.TypeOf((*MockDo)(nil).Do3), arg0)
}

// MockRun is a mock of Run interface
type MockRun struct {
	ctrl     *gomock.Controller
	recorder *MockRunMockRecorder
}

// MockRunMockRecorder is the mock recorder for MockRun
type MockRunMockRecorder struct {
	mock *MockRun
}

// NewMockRun creates a new mock instance
func NewMockRun(ctrl *gomock.Controller) *MockRun {
	mock := &MockRun{ctrl: ctrl}
	mock.recorder = &MockRunMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRun) EXPECT() *MockRunMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockRun) Run(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockRunMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRun)(nil).Run), arg0)
}
